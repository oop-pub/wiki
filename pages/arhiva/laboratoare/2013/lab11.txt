= Design patterns =

* Responsabil: [[adriana.draghici@cs.pub.ro|Adriana Drăghici]]
* Data publicării: 15.12.2013
* Data ultimei modificări: 18.12.2013


== Obiective ==

Scopul acestui laborator este familiarizarea cu folosirea unor pattern-uri des întâlnite în design-ul atât al aplicațiilor, cât și al API-urilor - //Singleton//, //Observer//, //Command// și //Factory//.


== Introducere ==

În laboratorul [[lab10|Visitor Pattern]] au fost introduse design pattern-urile și aplicabilitatea Visitor-ului. Acesta este un pattern comportamental, și după cum ați observat oferă avantaje în anumite situații, în timp ce pentru altele nu este potrivit. Pattern-urile comportamentale modelează interacțiunile dintre clasele și componentele unei aplicații, fiind folosite în cazurile în care vrem sa facem un design mai clar și ușor de adaptat și extins. În afară de acest tip de pattern-uri, mai se folosesc și cele //structural// și //creational//, prezentate în clasificarea următoare:

* //Creational Patterns// - mecanisme de creare a obiectelor
   * **Singleton**, **Factory** etc
* //Structural Patterns// - definesc relații între entități
   * Decorator, Adapter, Facade, Composite, Proxy etc.
* //Behavioural Patterns// - definesc comunicarea între entități
  * Visitor,** Observer**, **Command**, Mediator, Strategy etc.

== Singleton Pattern ==

Pattern-ul Singleton este utilizat pentru a restrictiona numarul de instantieri ale unei clase la un singur obiect, deci reprezintă o metodă de a folosi o singură instanță a unui obiect în aplicație.

=== Utilizari ===

Pattern-ul Singleton este in general utilizat in urmatoarele cazuri:
* subansamblu al altor pattern-uri:
 ** impreună cu pattern-urile Abstract Factory, Builder, Prototype etc.
* obiectele care reprezintă stări
* în locul variabilelor globale. Singleton este preferat variabilelor globale deoarece, printre altele, nu poluează namespace-ul global cu variabile care nu sunt necesare.

Din punct de vedere al design-ului și testarii unei aplicații de multe ori se evită folosirea acestui pattern. De exemplu dacă avem nevoie sa menținem o referință către un obiect în mai multe clase, putem sa îl facem Singleton și să obținem acel obiect în fiecare componentă în care avem nevoie de el sau ca sa facem codul mai curat și cu un flow mai ușor de urmărit, să îl instanțiem doar într-un singur loc și să îl transmitem ca argument. 
<note tip>Încercați să nu folosiți în exces metode statice (să le utilizați mai mult pt funcții "utility") și componente Singleton.</note>

=== Implementare ===

Aplicarea pattern-ului Singleton constă în aplicarea unei metode ce permite crearea unei noi instanțe a clasei dacă aceasta nu exista deja. Daca instanța există deja, atunci întoarce o referință către acel obiect. Pentru a asigura o singură instanțiere a clasei, constructorul trebuie să fie //private//, iar instanța să fie oferită printr-o metodă statică, publică.

În cazul unei implementări Singleton, clasa respectivă va fi instanțiată **lazy** (//lazy instantiation//), utilizând memoria doar în momentul în care acest lucru este necesar deoarece instanța se creează atunci când se apelează ''getInstance()'', acest lucru putând fi un avantaj în unele cazuri, față de clasele non-singleton, pentru care se face //eager instantiation//, deci se alocă memorie încă de la început, chiar dacă instanța nu va fi folosită (mai multe detalii și exemplu în [[http://www.javaworld.com/article/2077568/learn-java/java-tip-67--lazy-instantiation.html |acest articol]])

<imgcaption image_singleton|Diagrama de clase pentru Singleton>{{ .:lab11:singletonclassdiagram.png |}}</imgcaption>


Respectând cerințele pentru un singleton enunțate mai sus, în Java, putem implementa o componentă de acest tip în mai multe feluri, inclusiv folosind ''enum''-uri în loc de clase. Atunci când îl implementâm trebuie avut în vedere contextul în care îl folosim, astfel încât să alegem o soluție care să funcționeze corect în toate situațiile ce pot apărea în aplicație (unele implementări au probleme atunci când sunt accesate din mai multe thread-uri sau când trebuie serializate).

<code java>
 public class Singleton {
   private Singleton instance = null;
   
   public static Singleton getInstance() {
      if(instance == null) 
          return new Singleton();
   }
   ...
 }
</code>

  * Instanța ''instance'' este //private//
  * Constructorul apelat este constructorul privat default
  * Instanța este inițial nulă
  * Instanța este creată la prima rulare a //getInstance()//

Codul din exemplul de mai sus funcționează corect în context single-threaded, însă în context multi-threading apar probleme legate de ce instanță ajung să obțină thread-urile. Aparent problema poate fi rezolvată folosind keyword-ul //synchronized//, însă nici acest lucru nu este suficient, soluția fiind de fapt folosirea keyword-ului static, ca în exemplul următor:
<code java>
public class Singleton {
    private static Singleton instance = new Singleton();

    public static Singleton getInstance(){
        return instance;
    }
    ... 
}
</code>
* Câmpul static nu este inițializat până când nu este referit prima oară
* Toate thread-urile vor avea acces la rezulatele inițializării.

//De ce Singleton și nu clase cu membri statici?//

O clasă de tip Singleton poate fi extinsă și metodele ei suprascrise, însă într-o clasă cu metode statice acestea nu pot fi suprascrise (//overriden//) (o discuție pe aceasta temă puteți gasi [[http://geekexplains.blogspot.ro/2008/06/can-you-override-static-methods-in-java.html | aici]], și o comparatie între static și dynamic binding [[http://geekexplains.blogspot.ro/2008/06/dynamic-binding-vs-static-binding-in.html | aici]].

=== Aplicabilitate ===

Acest pattern este utilizat des în situații în care avem obiecte care trebuie accesate din mai multe locuri ale aplicației:
* obiecte de tip logger
* obiecte care reprezintă resurse partajate (conexiuni, sockets etc.)
* obiecte ce conțin congurații pentru aplicație
* pentru obiecte de tip Factory.

Exemple din API-ul Java:
* [[http://docs.oracle.com/javase/7/docs/api/java/lang/Runtime.html | java.lang.Runtime]]
* [[http://docs.oracle.com/javase/7/docs/api/java/awt/Toolkit.html | java.awt.Toolkit]]

<note important>Folosirea componentelor Singleton poate să prezinte **dezavantaje** în multe cazuri, de exemplu în test-driven development este considerat chiar un //anti-pattern//. Codul care folosește stări globale este mai dificil de testat pentru că implică o cuplare mai strânsă a claselor, iar în testare de multe ori  se dorește izolarea unei componente și testarea ei individuală. Dacă o clasă testată folosește un obiect singleton, atunci trebuie testat și singleton-ul. Soluția este simularea //mock-up// a singleton-ului în teste. Încă o problemă a acestei cuplări mai strânse apare atunci când două teste depind unul de celălalt prin modificarea singleton-ului, deci trebuie impusă o anumită ordine a rulării testelor.</note>

== Factory ==

Patternurile de tip Factory sunt folosite pentru obiecte care generează instanțe de clase înrudite (implementează aceeași interfață, moștenesc aceeași clasă abstractă). Acestea sunt utilizate atunci când dorim să izolăm obiectul care are nevoie  de o instanță de un anumit tip, de creearea efectivă acesteia. În plus clasa care va folosi instanța nici nu are nevoie să specifice exact clasa obiectului ce urmează a fi creat, deci nu trebuie să cunoască toate implementările acelui tip, ci doar ce caracteristici trebuie să aibă obiectul creat. Din acest motiv, Factory face parte din categoria //Creational Patterns//, deoarece oferă o soluție legată de creearea obiectelor.

Aplicabilitate:
* în biblioteci/API-uri, utilizatorul este separat de implementarea efectivă a tipului (vedeți în java core api, java nio etc.)
* crearea obiectelor este mai complexă (trebuie realizate mai multe etape etc.), atunci separăm logica necesară instanțierii subtipului de clasa care are nevoie de instanță. 


=== Abstract Factory Pattern ===

<imgcaption af_image|Diagrama de clase pentru Abstract Factory>{{ .:lab11:abstractfactory.png |}}</imgcaption>

Codul următor corespunde diagramei din <imgref af_image>. În acest caz folosim interfețe pentru factory și pentru tip, însă în alte situații putem să avem direct //SpecializedFooFactory,// fără a implementa interfața //FooFactory//. 

<code java>

public interface Foo {
    public void bar();
}
public interface FooFactory {
    public Foo createFoo();
}
public class SpecializedFoo implements Foo {
    ... 
}
public class SpecializedFooFactory implements FooFactory {
    public Foo createFoo() {
        return new SpecializedFoo();
    }
}

</code>


=== Factory Method Pattern === 

Folosind pattern-ul Factory Method se poate defini o interfață pentru crearea unui obiect, însă ce obiecte este instațiat este dat de către subclase. 

Spre deosebire de Abstract Factory, Factory Method ascunde construcția unui obiect, nu a unei familii de obiecte "inrudite", care extind un anumit tip. Clasele care implementează Abstract Factory conțin de obicei mai multe metode factory.

<imgcaption fm_image|Diagrama de clase pentru Factory Method>{{ .:lab11:factorymethod.png?510 |}}</imgcaption>

=== Exemplu ===

Situația cea mai întâlnită în care se potrivește acest pattern este aceea când trebuie instantiate multe clase care implementează o anumită interfață sau extind o altă clasă (eventual abstractă), ca în exemplul de mai jos. Clasa care folosește aceste subclase nu trebuie să "știe" tipul lor concret ci doar pe al părintelui. Implementarea de mai jos corespunde pattern-ului Abstract Factory pentru clasa //PizzaFactory//, și foloseste factory method pentru metoda ''createPizza''.

<code java PizzaLover.java>
abstract class Pizza {
    public abstract double getPrice();
}
class HamAndMushroomPizza extends Pizza {
    public double getPrice() {
        return 8.5;
    }
}
class DeluxePizza extends Pizza {
    public double getPrice() {
        return 10.5;
    }
}
class HawaiianPizza extends Pizza {
    public double getPrice() {
        return 11.5;
    }
}

class PizzaFactory {
    public enum PizzaType {
        HamMushroom, Deluxe, Hawaiian
    }
    public static Pizza createPizza(PizzaType pizzaType) {
        switch (pizzaType) {
            case HamMushroom: return new HamAndMushroomPizza();
            case Deluxe:      return new DeluxePizza();
            case Hawaiian:    return new HawaiianPizza();
        }
        throw new IllegalArgumentException("The pizza type " + pizzaType + " is not recognized.");
    }
}
public class PizzaLover {
    public static void main (String args[]) {
        for (PizzaFactory.PizzaType pizzaType : PizzaFactory.PizzaType.values()) {
            System.out.println("Price of " + pizzaType + " is " + PizzaFactory.createPizza(pizzaType).getPrice());
        }
    }
}
</code>
<code>
Output:
Price of HamMushroom is 8.5
Price of Deluxe is 10.5
Price of Hawaiian is 11.5
</code>


=== Singleton Factory ===

De obicei avem nevoie ca o clasă factory să fie utilizată din mai multe componente ale aplicației. Ca să economisim memorie este suficient să avem o singură instanță a factory-ului și să o folosim pe aceasta. Folosind pattern-ul Singleton putem face clasa factory un singleton, și astfel din mai multe clase putem obține instanță acesteia.

Un exemplu ar fi Java Abstract Window Toolkit ([[http://en.wikipedia.org/wiki/Abstract_Window_Toolkit|AWT]]) ce oferă clasa abstractă [[http://docs.oracle.com/javase/7/docs/api/java/awt/Toolkit.html | java.awt.Toolkit]] care face legătura dintre componentele AWT și implementările native din toolkit. Clasa //Toolkit// are o metodă factory ''Toolkit.getDefaultToolkit()'' ce întoarce subclasa de //Toolkit// specifică platformei. Obiectul //Toolkit// este un Singleton deoarece AWT are nevoie de un singur obiect pentru a efectua legăturile și deoarece un astfel de obiect este destul de costisitor de creat. Metodele trebuie implementate în interiorul obiectului și nu pot fi declarate statice deoarece implementarea specifică nu este cunoscută de componentele independente de platformă. 



== Observer Pattern ==

Design Pattern-ul //Observer// definește o relație de dependență 1..* între obiecte astfel încât când un obiect își schimbă starea, toți dependenții lui sunt notificați și actualizați automat. Folosirea acestui pattern implică existența unui obiect cu rolul de //subiect//, care are asociată o listă de obiecte dependente, cu rolul de //observatori//, pe care le apelează automat de fiecare dată când se întâmplă o acțiune. 
  
Acest pattern este de tip //Behavioral// (comportamental), deorece facilitează o organizare mai bună a comunicației dintre clase în funcție de rolurile/comportamentul acestora. 

Observer se folosește în cazul în care mai multe clase(//observatori//) depind de comportamentul unei alte clase(//subiect//), în situații de tipul:   
 * o clasă implementează/reprezintă logica, componenta de bază, iar alte clase doar folosesc rezultate ale acesteia (monitorizare).  
 * o clasă efectuează acțiuni care apoi pot fi reprezentate în mai multe feluri de către alte clase (view-uri ca în figură de mai jos). 
  
Practic în toate aceste situații clasele Observer **observă** modificările/acțiunile clasei Subject. Observarea se implementează prin **notificări inițiate din metodele clasei Subject**. 

=== Structură ===

Pentru aplicarea acestui pattern, clasele aplicației trebuie să fie structurate după anumite roluri, și în funcție de acestea se stabilește comunicarea dintre ele. În exemplul din <imgref obs_image>, avem două tipuri de componente, //Subiect// și //Observator//, iar //Observator// poate fi o interfață sau o clasă abstractă ce este extinsă cu diverse implementări, pentru fiecare tip de monitorizare asupra obiectelor //Subiect//.
    * observatorii folosesc datele subiectului
    * observatorii sunt notificați automat de schimbări ale subiectului
    * subiectul cunoaște toți observatorii
    * subiectul poate adăuga noi observatori

<imgcaption obs_image|Diagrama de clase pentru Observer Pattern>{{ .:lab11:observer.png|}}</imgcaption>

**Subiect**
 * nu trebuie să știe ce fac observatorii, trebuie doar să mențină referințe către obiecte de acest tip
 * nu știe ce fac observatorii cu datele
 * oferă o metodă de adăugare a unui Observator, eventual și o metodă prin care se pot deinregistra observatori 
 * menține o listă de referințe cu observatori
 * când apar modificări (e.g. se schimbă starea sa, valorile unor variabile etc) notifică toți Observatorii

**Observator**
 * definește o interfață notificare despre schimbări în subiect 
 * ca implementare: 
    * toți observatorii pentru un anumit subiect trebuie să implementeze această interfață 
    * metoda (metode) ce sunt invocate de către subiect pentru a notifica o schimbare. Ca argumente se poate primi chiar instanța subiectului sau obiecte speciale care reprezintă evenimentul ce a provocat schimbarea 
   
**View/ObservatorDerivat**
* implementeaza interfața Observator

Aceasta schema se poate extinde, în funcție de aplicație, observatorii pot ține referințe catre subiect sau putem adauga clase speciale pentru reprezentarea evenimentelor, notificarilor. Un alt exemplu il puteti gasi [[http://www.research.ibm.com/designpatterns/example.htm |aici]].


=== Implementare ===

Un exemplu de implementare este [[.:lab6#exercitii|exercitiul 2]] de la laboratorul  6 (Clase interne). Urmăriți soluția acestuia și diagrama de clase pentru acesta.

Tookit-urile GUI, cum este și [[http://en.wikipedia.org/wiki/Swing_%28Java%29|Swing]] folosesc acest design pattern, de exemplu apăsarea unui buton generează un eveniment ce poate fi transmis mai multor //listeners// înregistrați acestuia ([[http://www.programcreek.com/2009/01/the-steps-involved-in-building-a-swing-gui-application/|exemplu]]).

API-ul Java oferă clasele [[http://docs.oracle.com/javase/7/docs/api/java/util/Observer.html |Observer]] și [[http://docs.oracle.com/javase/7/docs/api/java/util/Observable.html |Observable]] care pot fi subclasate pentru a implementa propriile tipuri de obiecte ce trebuie monitorizate și observatorii acestora.

== Command Pattern ==

Design pattern-ul //Command// încapsulează un apel cu tot cu parametri într-o clasă cu interfață generică. Acesta este //Behavioral// pentru ca modifică interacțiunea dintre componente, mai exact felul în care se efectuează apelurile. 

Acest pattern este recomandat în următoarele cazuri: 
* pentru a ușura crearea de structuri de delegare, de callback, de apelare întârziată
* pentru a reține lista de comenzi efectuate asupra obiectelor
    * accounting
    * liste de Undo, Rollback pentru tranzacții - suport pentru operatii reversibile (//undoable operations//)

Exemple de utilizare:
* sisteme de logging, accounting pentru tranzacții
* sisteme de undo (ex. editare imagini)
* mecanism ordonat pentru delegare, apel întârziat, callback

=== Structura ===

Ideea principală este de a crea un obiect de tip //Command// care va reține parametrii pentru comandă. Comandantul reține o referință la comandă și nu la componenta comandată. Comanda propriu-zisă este anunțată obiectului //Command// (de către comandant) prin execuția unei metode specificate asupra lui. Obiectul //Command// este apoi responsabil de trimiterea (//dispatch//) comenzii către obiectele care o îndeplinesc (//comandați//). 

<imgcaption cmd_image|Diagrama de stări pentru CommandPattern>{{ .:lab11:command.png |}}</imgcaption>
  
 Tipuri de componente (**roluri**): 
 * **Invoker** - comandantul 
 ** apelează acțiuni pe comenzi (invocă metode oferite de obiectele de tip //Command//) 
 ** poate menține, dacă e cazul, o //listă a tutoror comenzilor aplicate// pe obiectul (obiectele) comandate. Este necesară reținerea acestei liste de comenzi atunci când implementăm un comportament de undo/redo al comenzilor. 
 ** primește clase //Command// pe care să le invoce
 * **Receiver** - comandatul
 ** este clasa asupra căreia se face apelul 
 ** conține implementarea efectivă a ceea ce se dorește executat
 * **Command** - obiectele pentru reprezentarea comenzilor implementează această interfață/o extind dacă este clasă abstractă 
 ** //concrete command// - ne referim la implementări/subclasele acesteia  
 ** de obicei conțin metode cu nume sugestiv pentru executarea acțiunii comenzii (e.g. ''execute()''). Implementările acestora conțin apelul către clasa \textit{Receiver}.
 ** în cazul implementării unor acțiuni //undoable// adăugăm metode pentru ''undo'' și/sau ''redo''. 
 ** țin referințe către comandați (receivers) pentru a aplica/invoca acțiunea ce reprezintă acea comandă 

În Java, se pot folosi atât interfețe cât și clase abstracte, pentru Command, depinzând de situație (e.g. clasă abstractă dacă știm sigur ca obiectele de tip Command nu mai extind și alte clase).

În diagrama din <imgref cmd_image>, comandantul este clasa //Invoker// care conține o referință la o instanță (command) a clasei (Command). //Invoker// va apela metoda abstractă ''execute()'' pentru a cere îndeplinirea comenzii. //ConcreteCommand// reprezintă o implementare a interfeței //Command//, iar în metoda ''execute()'' va apela metoda din //Receiver// corespunzătoare acelei acțiuni/comenzi.
  
=== Implementare ===

Diagrama de secvență din <imgref cmd_flow_image> prezintă apelurile în cadrul unei aplicație de editare a imaginilor, ce este structurată folosind pattern-ul Command. În cadrul acesteia, Receiver-ul este //Image//, iar comenzile //BlurCommand// și //CropCommand// modifică starea acesteia. Structurând aplicația în felul acesta, este foarte ușor de implementat un mecanism de undo/redo, fiind suficient să menținem în Invoker o listă cu obiectele de tip //Command// aplicate imaginii. 

<imgcaption cmd_flow_image|Diagrama de secvență pentru comenzile de prelucrare a imaginilor>{{ .:lab11:command_image_sequence.png |}}</imgcaption>

Pe [[http://en.wikipedia.org/wiki/Command_pattern | wikipedia]] puteți analiza exemplul PressSwitch. Flow-ul pentru acesta este ilustrat în <imgref cmd_flow_image2>
<imgcaption cmd_flow_image2|Diagrama de secvență pentru comenzile de aprindere/stingere a switch-ului>{{ .:lab11:command_switch_sequence.png | }}</imgcaption>



== Exerciții ==

Tema comună a exercițiilor din acest laborator este realizarea unei aplicații care simulează un boardgame/cardgame, [[http://boardgamegeek.com/boardgame/36218/dominion |Dominion]]. Mecanica jocului se bazează pe trei tipuri de cărți: acțiuni, bani și victory cards (acestea stabilesc scorul). În fiecare tură fiecare jucător poate juca acțiuni și apoi cumpăra alte cărți cu banii pe care îi are atunci în mână.  

Putem observa că atunci când dorim să implementăm elemente din joc, putem folosi diferite pattern-uri pentru a structura  clasele, astfel acțiunile jucătorilor pot reprezenta comenzi (//Command Pattern//), jocul poate avea mai multe view-uri (un view pt scor, unul pt istoricul acțiunilor executate etc), deci //Observer Pattern//, folosim multe obiecte ce extind anumite tipuri și putem separa crearea de instanțe pentru acestea printr-un //Factory//.

  - **(1p)** Creați două subclase ale clasei abstracte //GameCommand//, reprezentând acțiunile pe care le pot face jucătorii - //play// și //buy//, respectând detalii din comentariile din scheletul de cod.
  - **(1p)** Creați o clasă //PlayArea//, practic unde se desfășoară jocul, aceasta oferind metoda ''public void play(GameCommand c)'', care execută o acțiune din joc (//GameCommad//). 
  - **(2p)** Modificați clasa //PlayArea// astfel încât să fie observabilă (implementează ''Observable'')
      * menține o listă de observatori (//Observer//) 
      * notifică observatorii atunci când un jucător execută ceva
      * evenimentele trimise observatorilor sunt de tip //GameEvent//
  - **(2p)** Implementați și testați doi observatori:
      - //ScoreObserver// - ține cont de numărul de puncte acumulate de fiecare jucător (valoare dată de victory cards cumpărate)
      - //GameLogger// - afișează fiecare acțiune efectuată de jucători - jucarea unor action cards, punerea în joc a unor treasure cards și cumpărarea de cărți.
  - **(2p)** Creați un obiect de tip //singleton-factory// care întoarce obiecte de tip //GameCommand//. 
  - **(2p)** Implementați un mecanism de undo/redo pe acțiunile jucătorului, cât timp este tura sa.
        * undo/redo se aplică pe comenzile date pe //PlayArea//, deci aici trebuie ținută o listă cu acestea, pentru a știi sa le facem undo. 
        * //PlayArea// va oferi metodele ''undo'' și ''redo''.
        * când se efectuează un undo trebuie notificați observatorii (puteți adăuga un nou tip de GameAction), iar observatorul Logger va afișa la ce s-a făcut undo, iar cel de Score va scoate scorul, dacă s-a facut undo la un buy de victory card (se va scădea scorul aferent Victory-card-ului implicat).
        * când se efectueză un redo notificați observatorii la fel cum îi notificați în metoda //play//.
         
Puteți juca Dominion și [[http://play.goko.com/Dominion/gameClient.html |online]].

/* exercitii 2012
* (**4p**) Acest exercitiu are ca scop exemplificarea folosirii pattern-ului **Observer**.
** (2p) a) O clasa ''MessageSet'' tine o lista de mesaje (un text scurt) primite de la utilizator. Atunci cand se adauga un nou mesaj afisati acest eveniment. Decuplati primirea si stocarea mesajului de afisarea evenimentul folosind pattern-ul //Observer//. **Hint:** Un obiect //observator// face afisarea evenimentului, //subiectul// este ''MessageSet''.
** (2p) b) Extindeti exercitiul anterior astfel incat atunci cand se primeste un mesaj sa fie afisat in alte limbi. Folositi obiecte //observator// care fac traducerea si afisarea mesajului in cate o alta limba. Pentru a usura testarea (nu este importanta traducerea in sine, ci design-ul aplicatiei) fixati-va cateva (<10) cuvinte de test a caror traducere o mentineti in observatori in structuri de tip [http://docs.oracle.com/javase/6/docs/api/java/util/HashMap.html HashMap] si testati pe mesaje continand doar acele cuvinte (daca un cuvant nu e in "dictionar" il afisati netradus).
*** clasa ''MessageSet'' trebuie sa aiba metode pentru:
**** inregistrare observator(i)
**** primire mesaj
**** notificare observator(i)
*** pastrati o //lista de observatori// in clasa ''MessageSet''
*** conform descrierii pattern-ului, observatorii extind o clasa abstracta sau interfata ce reprezinta un observator.
* (**3p**) In cadrul unei aplicatii de editare imagini pentru a reprezenta actiunile efectuate in timpul editarii folosim obiecte pentru fiecare tip de comanda ce modifica imaginea. De exemplu o comanda pentru 'resize', alta pentru 'crop', alta pentru pentru aplicarea unui filtru. Pentru a decupla logica construirii acestor obiecte putem folosi pattern-ul **Factory**. Implementati o clasa ''ImageCommandFactory'' care creaza obiecte ce extind clasa abstracta ''ImageCommand'' (3 tipuri de comenzi, de exemplu ResizeCommand, BlurFilterCommad, CropCommand). 
** clasa ''ImageCommand'' ofera metoda ''execute()'' ce afiseaza un mesaj cu explicatia acelei comenzi.
** clasele pentru comenzi pot sa aiba atribute diferite in functie de comanda.
** unul din motivele pentru care avem nevoie de clase diferite pentru a reprezenta comenzile este ca sa vedem aplicarea lor ca o lista de actiuni diferite si undoable. 
* (**4p**) Extindeti exercitiul anterior astfel incat sa se poata face undo-redo ale acelor comenzi. Folositi pattern-ul** Command**. 
** Modificati comenzile astfel incat sa aiba metodele de ''undo/redo''. Unde faceti intai aceasta modificare? 
** Creati o clasa ''Image'' pe care se aplica aceste comenzi. Aceste comenzi doar modifica niste atribute, ca sa "afisati" imaginea trebuie de fapt sa afisati starea atributelor (de exemplu afisati: blurred: yes, size: 100x100 etc).
***contine si o metoda care aplica comanda (e.g. action()) care va modifica atributele si eventual va afisa un mesaj informativ ca s-a executat.
** Creati o clasa cu rolul de Invoker (comandant) care invoca comenzile
*** trebuie sa retina o lista de comenzi, iar cand se da ''undo/redo'' pe imagine se apeleaza ''undo/redo'' la rand pt comenzile aplicate.

*/
== Resurse ==

* {{ .:lab11::design-patterns-skel.zip|Schelet}}
* {{ .:lab11::design-patterns-sol.zip|Soluții}}
* <html><a class="media mediafile mf_pdf" href="/poo/arhiva/laboratoare/2013/lab11?do=export_pdf">PDF laborator</a></html>

== Referințe ==

* [[http://geekexplains.blogspot.ro/2008/06/dynamic-binding-vs-static-binding-in.html | Dynamic-binding vs static binding]]
* [[http://www.javaworld.com/article/2077568/learn-java/java-tip-67--lazy-instantiation.html | Lazy Instantiation]]
* [[http://www.codeproject.com/Articles/15207/Design-Patterns-Command-Pattern |Descriere Command Pattern si exemplu pentru operatii undo/redo]]
* [[http://www.javaworld.com/cgi-bin/mailto/x_java.cgi?pagetosend=/export/home/httpd/javaworld/javaworld/javatips/jw-javatip68.html&pagename=/javaworld/javatips/jw-javatip68.html&pageurl=http://www.javaworld.com/javaworld/javatips/jw-javatip68.html&site=jw_core | Learn how to implement the Command pattern in Java]]
*  [[http://sourcemaking.com/design_patterns/observer/java/1 | Exemple simple pattern Observer]] 
* [[http://sourcemaking.com/design_patterns/observer | Explicații pattern Observer]].

/* exercitii 2011
* (**10p**) Utilizati [[Media:Lab7-sol.zip|rezolvarea]] exercitiului 1 din laboratorul 7, pentru a adauga clasei ''MyArrayList'' functionalitatea **undo/redo** pentru operatiile ''add''/''remove''/''set'', utilizand pattern-ul //Command//.
** Mai intai, adaugati urmatoarele 2 metode in clasa ''MyArrayList'':
*** ''add(int, float)'', ce permite adaugarea unui element intr-o pozitie oarecare
*** ''set(int, float)'', ce permite stabilirea elementului de la pozitia precizata
**: **Hint**: Utilizati ''checkIndex'' pentru verificarea pozitiei primite!
** Definiti o **interfata**, ''Undoable'', ce constituie punctul de plecare pentru stocarea operatiilor efectuate asupra listei. Interfata va expune metodele ''undo'' si ''redo'' (fara parametri).
** Definiti **cate o clasa** ce implementeaza ''Undoable'', pentru fiecare din cele 3 operatii pe lista (''add''/''remove''/''set''). In clase veti tine informatiile pe care le considerati necesare.
** Definiti o clasa, ''UndoManager'', care va gestiona **istoricul** comenzilor executate, respectiv anulate (//undone//). **Hints**:
*** Puteti folosi o **lista** de obiecte ''Undoable''.
*** Pentru **deplasarea** eleganta, de-a lungul listei, puteti folosi un ''[http://java.sun.com/javase/7/docs/api/java/util/ListIterator.html ListIterator]'', ce permite, in plus fata de un ''[http://download.oracle.com/javase/6/docs/api/java/util/Iterator.html Iterator]'' clasic, deplasarea inapoi si adaugarea in pozitia curenta a cursorului. Identificati in documentatie metodele ce realizeaza acest lucru.
*** Aveti in vedere faptul ca adaugarea unei comenzi la lista, dupa executarea a cel putin unui ''undo'', conduce la **eliminarea** tuturor comenzilor memorate, pana la sfarsitul listei.
** Modificati implementarile metodelor din ''MyArrayList'', astfel incat sa **stocati** comenzile realizate, utilizand clasele definite mai sus.
** Definiti in clasa ''MyArrayList'' metodele ''undo'' si ''redo'', cu comportamentul asteptat.
<br />
*/


/*

1. (5p) Sa se construiasca in mod dinamic un oras. Fiecare oras are un sediu central de arhitectura ce aproba construirea cladirilor si a spatiilor verzi. Recomandam utilizarea pattern-ului Singleton pentru a asigura unicitatea acestui sediu si clasa de baza institutii din care vor fi mostenite diferitele tipuri de cladiri si spatii verzi. Institutiile prezente in oras pot fi de mai multe tipuri: Muzee, Teatre, Opera, Cinematografe, Hoteluri, Facultati, Camine, Parcuri, Gradini Botanice, Gradini Zoo. Aceste institutii vor fi construite in mod aleator folosind pattern-ul factory (vor primi aprobarea sediului central de arhitectura). Orasul va avea maxim 100 de institutii.

Afisati o statistica a fiecarui numar de institutii prezente in oras.

2. (2p) Sa se extinda exercitiul 1 astfel incat sa apara o notificare de fiecare data cand se construieste o facultate. Pentru acest lucru recomandam folosirea pattern-ului Observer.

3. (5p) Presupunem ca primaria are rolul de a comanda constructia anumitor tipuri de cladiri. Implementati o primarie folosind pattern-ul Command si scrieti comenzile pentru construirea unui parc odata ce a fost construita o facultate.
*/